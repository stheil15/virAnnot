Example execution
=================

Create a directory for your experiment::

  mkdir test_virAnnot
  cd test_virAnnot

Copy example read files, Illumina adapters fasta file, the sample id mapping file, the step and parameter file::

  cp /path/to/virAnnot/examples/reads/*.fq .
  cp /path/to/virAnnot/examples/adapters.fa .
  cp /path/to/virAnnot/examples/map.txt .
  cp /path/to/virAnnot/examples/step.yaml .
  cp /path/to/virAnnot/examples/parameters.yaml .

You have to modify this file to fit your configuration.

This example contains all modules and options available and must be used as a template for your own analysis.

Step **ReadSoustraction**
*************************

This module uses bowtie2 to map reads against nucleotide sequence and Samtools to extract unmapped pairs.

Corresponding ``step.yaml`` section:

.. literalinclude:: ../../examples/step.yaml
  :lines: 1-9

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n ReadSoustraction_phiX

Step **Demultiplex**
********************

This module uses cutadapt demultiplex reads from library and also trim reads from adapters and chimeric reads.
Each demultiplexing step are described in the module section.
Corresponding ``step.yaml`` section:

.. literalinclude:: ../../examples/step.yaml
  :lines: 10-19

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Demultiplex

Step **DemultiplexHtml**
************************

This module gather all ``*_demultiplex.stats.csv`` files and create and html report.
Corresponding ``step.yaml`` section:

.. literalinclude:: ../../examples/step.yaml
  :lines: 20-25

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n DemultiplexHtml

Output example:

.. raw:: html

  <iframe src="_static/stat_demultiplex/index.html" height="400px" width="100%"></iframe>


Step **Diamond**
****************

This module launch Diamond similarity search for reads and produce an XML file per sample.

.. literalinclude:: ../../examples/step.yaml
  :lines: 63-72

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Diamond


Step **Assembly**
*****************

This module simply launch udba_ud, newbler and metaspades assemblers in each sample folder, rename scaffolds id and move the resulting fasta file.

.. literalinclude:: ../../examples/step.yaml
  :lines: 33-46

Test both idba and spades:

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Assembly_idba
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Assembly_spades


Example of idba assembly::

  >ds2015-149_0
  GTGTAAGGTGGTGAAGG...
  >ds2015-149_1
  CCTGCGAATTGGGCCAA...

Step **Map**
************

This module uses bowtie2 to map reads back on assemblies and samtools will count reads per contig.

Step file:

.. literalinclude:: ../../examples/step.yaml
  :lines: 47-62

Command:

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Map_idba
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Map_spades

Output a two column tabular file, column 1 sequence ID, column 2 number of reads.
Example of ``.rn`` file produce::

  ds2015-149_0    1179
  ds2015-149_1    444
  ds2015-149_10   26
  ds2015-149_11   44
  ds2015-149_12   14
  ds2015-149_13   4
  ds2015-149_14   6

Step **Blast**
**************

This module is able to launch Blast(s) against provided databases localy or remotely.
The script blast_launch.py must be present on distant servers and ``parameter.yaml`` modified to fit your servers.

Step file:

.. literalinclude:: ../../examples/step.yaml
  :lines: 94-136

Commands:

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Blast_nr
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Blast_refvirTX
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Blast_allvirTX
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Blast_RPS

Step **Blast2ecsv**
*******************

  This module uses the XML file generated by the corresponding Blast module and the taxonomy contained in the SQLITE database to create a csv file containing match options, taxonomy string and sequences.

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Blast2ecsv_nr
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Blast2ecsv_refvirTX
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Blast2ecsv_allvirTX

Example output of ds2015-149_idba.scaffold.tbltx.all_vir.csv::

  #algo   query_id        nb_reads        query_length    accession       description     organism        percentIdentity nb_hsps queryOverlap    hitOverlap      evalue  score   tax_id  taxonomy        sequence
  "TBLASTX"       "ds2015-149_52" "6"     "117"   "KX274275.1"    "Grapevine rupestris stem pitting associated virus isolate SK704 B, complete genome"    "Grapevine rupestris stem pitting-associated virus"     "95.8"  "3"     "100"   "3"     "7.55823333338424e-05"  "222.2257"      "196400"        "Viruses;ssRNA viruses;Betaflexiviridae;Foveavirus;Grapevine rupestris stem pitting-associated virus"   "GAACACTATGAACGACAACTGGAAATCTGAGCACGCTATAAACACCCACAAACTCAAACGTAGACAAAGCTTTAACTAAGTTATTCATAATAATCACACCATGCCAAACACTTAAGG"

Step **Rps2ecsv**
*****************

  This module uses the rpstblastn XML file and the PFAM taxonomy to annotate query sequences and produce a readable CSV file.

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Rps2ecsv

.. literalinclude:: ../../examples/step.yaml
  :lines: 184-188

Example output of ds2015-149_idba.scaffold.rps.pfam.csv::

  #query_id       query_length    cdd_id  hit_id  evalue  startQ  endQ    frame   description     superkingdom    no rank family  genus
  "ds2015-149_0"  "1428"  "pfam01443"     "gnl|CDD|279750"        "1.33194e-06"   "29"    "223"   "2"     "pfam01443, Viral_helicase1, Viral (Superfamily 1) RNA helicase.  Helicase activity for this family has been demonstrated and NTPase activity. This helicase has multiple roles at different stages of viral RNA replication, as dissected by mutational analysis."     "Viruses(1.00);"        "ssRNA viruses(0.99);unclassified viruses(0.01);"       "Alphaflexiviridae(0.36);Virgaviridae(0.24);Betaflexiviridae(0.15);Tymoviridae(0.10);Bromoviridae(0.07);"       "Potexvirus(0.26);Allexivirus(0.10);Carlavirus(0.08);Tymovirus(0.08);Tobamovirus(0.08);"


Step **Ecsv2excel**
*******************

  This module takes all csv files and create a compile them in a single Excel file.

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Ecsv2excel

.. literalinclude:: ../../examples/step.yaml
  :lines: 189-195

Example output of ds2015-149_idba.scaffold.xlsx:

.. image:: ecsv2excel.png

Step **Ecsv2krona**
*******************

  This module uses CSV files from Blast2ecsv module to create Krona html file.

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Ecsv2krona
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Ecsv2krona_dmd

Example output of Krona:

.. raw:: html

  <iframe src="_static/krona_blast/blast.global.krona.html" height="400px" width="100%"></iframe>
  <iframe src="_static/krona_diamond/global_krona_dmd.html" height="400px" width="100%"></iframe>


Step **Automapper**
*******************

  This module uses Blast CSV annotation file to select reference sequences, map query sequences and produce png of identity plot and alignment file in fasta format.

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Automapper_nr
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Automapper_allvirTX
  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Automapper_refseqTX

Example output of ds2015-149/ds2015-149_autoMapper_nr:

.. raw:: html

  <iframe src="_static/results/index.html" height="400px" width="100%"></iframe>


Step **Rps2tree**
*****************

  This module use Rps2ecsv results of all sample to cut and group sequences based on identified domains and create OTUs, identity matrix, tree nexus files and png for each domains colored by SampleID.

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Rps2tree

.. raw:: html

  <iframe src="_static/rps2tree_global/index.html" height="400px" width="100%"></iframe>

Step **Getresults**
*******************

  This module simply copy important results file to a result directory.

.. code-block:: bash

  virAnnot.py -m map.txt -s step.yaml -p parameters.yaml -n Getresults
